// Generated by CoffeeScript 1.8.0
var Parameter, URL, emptyOutput, u1, url1, useDCClickTracker, useGAParams,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Parameter = (function() {
  function Parameter(str) {
    var x;
    x = str.split("=");
    this.name = x[0];
    this.val = x.length > 1 ? x[1] : "";
    console.log("Created parameter " + this.name + "=" + this.val);
  }

  return Parameter;

})();

URL = (function() {
  function URL(urlstring) {
    var hash_split, name, p, query_split, value, x, _i, _len, _ref, _ref1;
    this.urlstring = urlstring;
    this.warnings = [];
    this.errors = [];
    this.params = [];
    this.rawparams = [];
    this.qs = "";
    this.hash = "";
    this.destination = "";
    this.paramnames = [];
    this.clicktracker = "";
    hash_split = this.urlstring.split('#');
    if (hash_split.length > 1) {
      this.hash = hash_split[1];
    }
    query_split = hash_split[0].split('?');
    this.destination = query_split[0];
    switch (query_split.length) {
      case 1:
        this.warnings.push("No parameters found");
        break;
      case 2:
        this.qs = query_split[1];
        break;
      case 3:
        if (useDCClickTracker()) {
          this.clicktracker = query_split[0];
          this.destination = query_split[1];
          this.qs = query_split[2];
        } else {
          this.errors.push("Multiple question marks (?) found");
        }
        break;
      default:
        this.errors.push("Multiple question marks (?) found");
    }
    if (this.qs.length > 0) {
      this.rawparams = (function() {
        var _i, _len, _ref, _results;
        _ref = this.qs.split("&");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(new Parameter(x));
        }
        return _results;
      }).call(this);
      _ref = this.rawparams;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        console.log("Processing " + p.name + ", " + p.val);
        if (this.params[p.name] != null) {
          this.warnings.push("The parameter " + p.name + " was used multiple times");
        }
        this.params[p.name] = p.val;
      }
    }
    if (_.contains(this.destination, ' ')) {
      this.errors.push('Space found in destination');
    }
    if (_.contains(this.hash, ' ')) {
      this.errors.push('Space found in hash');
    }
    _ref1 = this.params;
    for (name in _ref1) {
      value = _ref1[name];
      if (_.contains(name, ' ')) {
        this.errors.push("Space found in the name of parameter '" + name + "'");
      }
      if (_.contains(value, ' ')) {
        this.errors.push("Space found in the value '" + value + "' of parameter '" + name + "'");
      }
    }
  }

  return URL;

})();


/* 
on page callbacks
 */

$(function() {
  $('#url-input-form').submit(function(event) {
    var clicktrackers, content, destinations, error_count, msg, name, names, params, rendered, row, table, tpl, u, url, url_string_list, urls, v, val, value, warning_count, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    event.preventDefault();
    url_string_list = $.trim($('#urls').val()).split("\n");
    emptyOutput();
    urls = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = url_string_list.length; _i < _len; _i++) {
        u = url_string_list[_i];
        _results.push(new URL(u));
      }
      return _results;
    })();
    names = [];
    params = [];
    destinations = [];
    clicktrackers = [];
    error_count = 0;
    warning_count = 0;
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      url = urls[_i];
      error_count += url.errors.length;
      warning_count += url.warnings.length;
      if (_ref = url.destination, __indexOf.call(destinations, _ref) < 0) {
        destinations.push(url.destination);
      }
      if (useDCClickTracker() && url.clicktracker.length > 0) {
        clicktrackers.push(url.clicktracker);
      }
      _ref1 = url.params;
      for (name in _ref1) {
        value = _ref1[name];
        if (__indexOf.call(names, name) < 0) {
          names.push(name);
        }
        if (params[name] == null) {
          params[name] = [];
        }
        params[name].push(value);
      }
    }
    table = $('#url-parts');
    tpl = '{{#names}}<th>{{.}}</th>{{/names}}';
    rendered = useDCClickTracker() ? "<th>Click Tracker</th>" : "";
    rendered += Mustache.render(tpl, {
      names: names
    });
    table.append("<thead><th>Destination</th>" + rendered + "</thead>");
    for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {
      url = urls[_j];
      tpl = "<td>{{destination}}\n    <div class=\"warnings\"><ul>{{#warnings}}<li>{{.}}</li>{{/warnings}}</ul></div>\n    <div class=\"errors\"><ul>{{#errors}}<li>{{.}}</li>{{/errors}}</ul></div>\n</td>";
      content = Mustache.render(tpl, {
        destination: url.destination,
        warnings: url.warnings,
        errors: url.errors
      });
      if (useDCClickTracker()) {
        content += "<td>" + url.clicktracker + "</td>";
      }
      for (_k = 0, _len2 = names.length; _k < _len2; _k++) {
        name = names[_k];
        v = url.params[name] || "";
        content += "<td>" + v + "</td>";
      }
      row = $('<tr></tr>').html(content);
      $('#url-parts').append(row);
    }
    tpl = "<div class=\"col-md-3\" id=\"\">\n    <h4>{{name}}</h4>\n    <ul>{{#values}}<li>{{.}}</li>{{/values}}\n    </ul>\n</div>";
    for (name in params) {
      val = params[name];
      rendered = Mustache.render(tpl, {
        name: name,
        values: _.uniq(val)
      });
      $('#value-lists').append(rendered);
    }
    rendered = Mustache.render(tpl, {
      name: "Click Tracker",
      values: clicktrackers
    });
    $('#value-lists').append(rendered);
    if (error_count === 0 && warning_count === 0) {
      msg = "<li>Congratulations - <span class='warnings'>No Warnings</span> or <span class='errors'>Errors</span> in " + urls.length + " records!</li>";
    } else {
      msg = "<li>There were <span class='errors'>" + error_count + " errors</span> and <span class='warnings'>" + warning_count + " warnings</span> found in " + urls.length + " records.</li>";
    }
    $('#errors').append(msg);
    return $('#output').show(1000);
  });
  return $('#url-input-cancel').click(function(event) {
    event.preventDefault();
    $('#output').hide(1000);
    emptyOutput();
    return $('#urls').val("");
  });
});

emptyOutput = function() {
  $('#errors').empty();
  $('#url-parts').empty();
  return $('#value-lists').empty();
};

useDCClickTracker = function() {
  return $('#dblclick-tracker').prop('checked');
};

useGAParams = function() {
  return $('#ga-params').prop("checked");
};

url1 = "http://www.vizio.com/audio-overview/?utm_campaign=vizio-soundbar&utm_medium=paid social&utm_source=fbx&utm_content=us-bt-al-v1-ba-s154x154&ci_linkid=vizio-soundbar_paid social_fbx_us-bt-al-v1-ba-s154x154";

u1 = new URL(url1);

//# sourceMappingURL=checkem.js.map
